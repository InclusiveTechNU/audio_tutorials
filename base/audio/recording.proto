/*
 * Copyright 2020 Northwestern Inclusive Technology Lab
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package itl.base;

import "base/timestamp.proto";

// The type of audio file format that should be expected when using the buffers
// from the audio recording message.
enum AudioFormatType {
    AUDIO_FORMAT_TYPE_WAV = 0;
}

// A fully encoded audio recording to store audio data and metadata. Often used
// to store data from an audio stream, from devices like microphones.
message AudioRecording {
    // Metadata about the audio recording, such as who create it, what its
    // called, and when it was created.
    AudioRecordingMetadata metadata = 1;

    // The type of format that the audio data is written to and should be
    // expected when using.
    AudioFormatType format_type = 2;

    // Short segments of the audio recording's data stored with information to
    // help process.
    repeated AudioBuffer buffers = 3;

    // Markers are timestamped notes that can be used to highlight important
    // parts of a recording or to mark when to pause the recording. 
    repeated AudioRecordingMarker markers = 4;
}

// Descriptive information about an audio recording, including who created it
// and when they edited the audio.
message AudioRecordingMetadata {
    // A title to describe the purpose of the audio recording.
    string title = 1;

    // The display names of the people who created the audio recording.
    repeated string author = 2;

    // The timestamp of when the audio recording was created.
    base.Timestamp time_created = 3;

    // The timestamp of when the audio recording or its metadata was last
    // modified by a person or program.
    base.Timestamp time_last_modified = 4;
}

// Represents a short audio asset that is part of a broader audio recording.
// These messages should hold less than 45 seconds of audio data. The message
// also contains information about the sample rate and channels that were
// recorded.
message AudioBuffer {
    // Raw bytes of audio data seperated by audio channel.
    repeated bytes buffers = 1;

    // Represents the samples per second of data stored in the buffer.
    float sample_rate = 2;

    // The number of sample frames included in the audio buffer.
    uint32 length = 3;

    // The duration of the audio buffer in seconds.
    double duration = 4;

    // The number of channels that were recorded and stored in the buffer.
    uint32 channel_count = 5;
}

// A message to annotate and highlight areas of an audio recording with text
// based notations.
message AudioRecordingMarker {
    // The time in seconds where the marker occurs in the audio recording.
    double time = 1;

    // The annotation stored at this timestamp that describes the purpose
    // of the marker.
    string note = 2;
}
